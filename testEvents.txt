//First we create (two) contracts that fire events

contract DTDcontract{
	address owner;
	mapping (string => string) info;

	function DTDcontract(){
		owner = msg.sender;
	}
	
	function updateInfo(string key, string value){
		info[key] = value;
	}

	function joinStrings(string  _a, string  _b) internal returns (string) {
		bytes memory a = bytes(_a);
		bytes memory b = bytes(_b);
		string memory c = new string(a.length + b.length);
		bytes memory bc = bytes(c);
		
		for (uint i = 0; i < a.length; i ++)
			bc[i] = a[i];
		for(i = 0; i <bc.length; i++)
			bc[a.length + i] = b[i];
		return c;
	}
}

contract DTDFactory{
	address owner ;
	DTDcontract[] dtds;
	
	event dtdCreated(uint id, address addr);
	event dtdUpdated(uint id);
	
	function DTDFactory(){
		owner = msg.sender;
	}
	
	function makeContract(){
		var c = new DTDcontract();
		dtds.push(c);
		var index = dtds.length -1;
		dtdCreated(index,msg.sender);
	}
	
	function updateContract(uint id, string key, string value){
		var c = dtds[id];
		c.updateInfo(key,value);
		dtdUpdated(id);
	}

	function getUpdates(uint id) returns (string info){
		
	}
}


//Next we remove white spaces and add them to a variable in the geth console.

var dtdFactorySource = 'contract DTDcontract{ address owner; mapping (string => string) info; function DTDcontract(){ owner = msg.sender; } function updateInfo(string key, string value){ info[key] = value; } function joinStrings(string _a, string _b) internal returns (string) { bytes memory a = bytes(_a); bytes memory b = bytes(_b); string memory c = new string(a.length + b.length); bytes memory bc = bytes(c); for (uint i = 0; i < a.length; i ++) bc[i] = a[i]; for(i = 0; i <bc.length; i++) bc[a.length + i] = b[i]; return c; } } contract DTDFactory{ address owner ; DTDcontract[] dtds; event dtdCreated(uint id, address addr); event dtdUpdated(uint id); function DTDFactory(){ owner = msg.sender; } function makeContract(){ var c = new DTDcontract(); dtds.push(c); var index = dtds.length -1; dtdCreated(index,msg.sender); } function updateContract(uint id, string key, string value){ var c = dtds[id]; c.updateInfo(key,value); dtdUpdated(id); } function getUpdates(uint id) returns (string info){ } }';


//Next we compile the contract

var dtdCompiled = web3.eth.compile.solidity(dtdFactorySource);


//Next we unlock the account that will inject the contract
primaryAccount = web3.eth.accounts[0];
personal.unlockAccount(primaryAccount, "panathinaikos")


//Next we inject the contract, we use as ABI the DTDFactory contract!

var dtdContract = web3.eth.contract(dtdCompiled.DTDFactory.info.abiDefinition);


//Next, we add the contract using a transaction:


var dtd = dtdContract.new({from:primaryAccount, data: dtdCompiled.DTDFactory.code, gas: 3000000}, function(e, contract){
    if(!e) {

      if(!contract.address) {
        console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");

      } else {
        console.log("Contract mined! Address: " + contract.address);
        console.log(contract);
      }
    }
})

//SENDING a transaction to a contract!
// the notation is : the (contract object).function_name.sendTransaction([args],{from:accout, to:account,value:amount_of_ehter_transfered,gas:gas_amount transfered} 
//example contract.SetMessage.sendTransaction(document.getElementById('message').value, {from: web3.eth.coinbase, value:web3.toWei('2','ether')});
// also a callback can added: function(err, address) {  if (!err) console.log(address); // "0x7f9fade1c0d57a7af66ab4ead7c2eb7b11a91385"}

dtd.makeContract.sendTransaction({from:primaryAccount})
dtd.updateContract.sendTransaction(0,"a_key","a_value",{from:primaryAccount})


